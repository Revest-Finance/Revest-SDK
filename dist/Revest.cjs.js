/*!
 * revest-sdk-core
 * Revest
 *
 * @version v1.0.0
 * @author Revest Team
 * @homepage https://github.com/Revest-Finance/Revest-SDK#readme
 * @repository git+https://github.com/Revest-Finance/Revest-SDK.git
 * @license MIT
 */
'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const SUBGRAPH_URL = {
  1: 'https://api.thegraph.com/subgraphs/name/alexvorobiov/eip1155subgraph',
  137: "https://thegraph.com/hosted-service/subgraph/iskdrews/erc1155polygon-subgraphone",
  250: 'https://api.thegraph.com/subgraphs/name/iskdrews/erc1155one',
  43114: "https://thegraph.com/hosted-service/subgraph/iskdrews/erc1155avax-one"
};
const ADDRESSES = {
  1: {
    MIN_BLOCK: 9005417,
    ROUTER: '0xD721A90dd7e010c8C5E022cc0100c55aC78E0FC4',
    PROVIDER: 'https://eth-mainnet.alchemyapi.io/v2/zOVFUzSEld1v_MuTOqGPYkTYttwBUrmF',
    UNISWAP: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',
    NFT_LOCKER: '0xc3B4F9fD4CadDc30797818Fd0A38BbF01d9E6000',
    ETHERSCAN_API: 'https://api.etherscan.io',
    MULTICALL: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441'
  },
  4: {
    MIN_BLOCK: 9005417,
    ROUTER: '0x21744C9A65608645E1b39a4596C39848078C2865',
    PROVIDER: 'https://eth-rinkeby.alchemyapi.io/v2/srVBZIhy3PWWN1URQfd-KlTJk8q964kr',
    UNISWAP: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',
    NFT_LOCKER: '0x1Ce0f18C2df349341D7c223dc0EB09d1DfAa94e2',
    ETHERSCAN_API: 'https://api-rinkeby.etherscan.io',
    MULTICALL: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821'
  },
  137: {
    MIN_BLOCK: 21525737,
    ROUTER: '0xC03bB46b3BFD42e6a2bf20aD6Fa660e4Bd3736F8',
    PROVIDER: 'https://polygon-mainnet.g.alchemy.com/v2/XZF2U-6qLByJKH9OVsB8rflwSYaZRQaq',
    UNISWAP: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32',
    NFT_LOCKER: '0x74fB7d0dA80CEb606872B33c6BCd3cC458BB43aF',
    ETHERSCAN_API: 'https://api.polygonscan.com',
    MULTICALL: '0xCBca837161be50EfA5925bB9Cc77406468e76751'
  },
  250: {
    MIN_BLOCK: 22917309,
    ROUTER: '0xe0741aE6a8A6D87A68B7b36973d8740704Fd62B9',
    PROVIDER: 'https://rpc.ftm.tools',
    UNISWAP: '0x152eE697f2E276fA89E96742e9bB9aB1F2E61bE3',
    NFT_LOCKER: '0x07317eD9204C9e76df03f106CeFfD5b021C5f6A5',
    ETHERSCAN_API: 'https://api.FtmScan.com',
    MULTICALL: '0x7f6A10218264a22B4309F3896745687E712962a0'
  },
  43114: {
    MIN_BLOCK: 7469820,
    ROUTER: '0x64e12fEA089e52A06A7A76028C809159ba4c1b1a',
    NFT_LOCKER: '0x7f95E5821D0a9FF60Bf6e1D454E980eE34382d62',
    PROVIDER: 'https://api.avax.network/ext/bc/C/rpc',
    UNISWAP: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',
    ETHERSCAN_API: 'https://api.snowtrace.io',
    MULTICALL: '0x7E9985aE4C8248fdB07607648406a48C76e9e7eD'
  }
};
const RouterABI = {
  _format: 'hh-sol-artifact-1',
  contractName: 'RevestAddressRegistry',
  sourceName: 'contracts/RevestAddressRegistry.sol',
  abi: [{
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor'
  }, {
    anonymous: false,
    inputs: [{
      indexed: true,
      internalType: 'address',
      name: 'previousOwner',
      type: 'address'
    }, {
      indexed: true,
      internalType: 'address',
      name: 'newOwner',
      type: 'address'
    }],
    name: 'OwnershipTransferred',
    type: 'event'
  }, {
    inputs: [],
    name: 'ADMIN',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'ESCROW',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'FNFT',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'LIQUIDITY_TOKENS',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'LOCK_MANAGER',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'METADATA',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'REVEST',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'REVEST_TOKEN',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'TOKEN_VAULT',
    outputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'bytes32',
      name: '',
      type: 'bytes32'
    }],
    name: '_addresses',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'uint256',
      name: '',
      type: 'uint256'
    }],
    name: '_dex',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'bytes32',
      name: 'id',
      type: 'bytes32'
    }],
    name: 'getAddress',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getAdmin',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'uint256',
      name: 'index',
      type: 'uint256'
    }],
    name: 'getDEX',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getLPs',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getLockManager',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getMetadataHandler',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getRevest',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getRevestFNFT',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getRevestToken',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getRewardsHandler',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'getTokenVault',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'lock_manager_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'liquidity_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'revest_token_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'token_vault_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'revest_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'fnft_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'metadata_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'admin_',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'rewards_',
      type: 'address'
    }],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [],
    name: 'next_dex',
    outputs: [{
      internalType: 'uint256',
      name: '',
      type: 'uint256'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'owner',
    outputs: [{
      internalType: 'address',
      name: '',
      type: 'address'
    }],
    stateMutability: 'view',
    type: 'function'
  }, {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'admin',
      type: 'address'
    }],
    name: 'setAdmin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'dex',
      type: 'address'
    }],
    name: 'setDex',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'liquidToken',
      type: 'address'
    }],
    name: 'setLPs',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'manager',
      type: 'address'
    }],
    name: 'setLockManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'metadata',
      type: 'address'
    }],
    name: 'setMetadataHandler',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'revest',
      type: 'address'
    }],
    name: 'setRevest',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'fnft',
      type: 'address'
    }],
    name: 'setRevestFNFT',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'token',
      type: 'address'
    }],
    name: 'setRevestToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'esc',
      type: 'address'
    }],
    name: 'setRewardsHandler',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'vault',
      type: 'address'
    }],
    name: 'setTokenVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }, {
    inputs: [{
      internalType: 'address',
      name: 'newOwner',
      type: 'address'
    }],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  }],
  bytecode: '0x6080604052600060015534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118cc806100836000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80638da5cb5b11610160578063deedfdbd116100d8578063f95eb4821161008c578063f9f5e1dd11610071578063f9f5e1dd146108e3578063fe40330414610949578063fe7620241461097f57600080fd5b8063f95eb4821461086a578063f97e7d741461087d57600080fd5b8063ee662922116100bd578063ee6629221461081d578063f2fde38b14610844578063f5e95acb1461085757600080fd5b8063deedfdbd146107e3578063e681c4aa146107f657600080fd5b8063b61657f71161012f578063cb4966fb11610114578063cb4966fb1461072f578063d59e296e14610756578063dd9795c6146107bc57600080fd5b8063b61657f714610693578063c8aa6ad6146106f957600080fd5b80638da5cb5b1461062857806399ee24c6146106465780639bb363a91461066d578063b38221ff1461068057600080fd5b80634a6c9235116101f3578063704b6c02116101c25780637378c2cf116101a75780637378c2cf146105c75780637f407235146105ee57806387f7f6961461061557600080fd5b8063704b6c02146105ac578063715018a6146105bf57600080fd5b80634a6c9235146104c457806354f2f7af146104cd5780636497a8a0146105335780636e9960c31461054657600080fd5b80632a0acc6a1161024a578063382b5e071161022f578063382b5e071461047557806338c3df071461048a578063447fa8b7146104b157600080fd5b80632a0acc6a1461040a5780632a7b941a1461043f57600080fd5b8063016abd2c1461027c578063025e3c6114610308578063035d0c691461036e57806321f8a721146103d4575b600080fd5b7f5245564553545f544f4b454e000000000000000000000000000000000000000060005260026020527fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f5473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b7f4d4554414441544100000000000000000000000000000000000000000000000060005260026020527f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc5473ffffffffffffffffffffffffffffffffffffffff166102de565b7f4c4f434b5f4d414e41474552000000000000000000000000000000000000000060005260026020527fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f385473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de6103e2366004611841565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6104317f41444d494e00000000000000000000000000000000000000000000000000000081565b6040519081526020016102ff565b6102de61044d366004611841565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b610488610483366004611779565b610992565b005b6104317f4d4554414441544100000000000000000000000000000000000000000000000081565b6104886104bf366004611779565b610a8d565b61043160015481565b7f544f4b454e5f5641554c5400000000000000000000000000000000000000000060005260026020527fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b35473ffffffffffffffffffffffffffffffffffffffff166102de565b610488610541366004611779565b610b55565b7f41444d494e00000000000000000000000000000000000000000000000000000060005260026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d635473ffffffffffffffffffffffffffffffffffffffff166102de565b6104886105ba366004611779565b610c4b565b610488610d41565b6104317f464e46540000000000000000000000000000000000000000000000000000000081565b6104317f4c4f434b5f4d414e41474552000000000000000000000000000000000000000081565b610488610623366004611779565b610db4565b60005473ffffffffffffffffffffffffffffffffffffffff166102de565b6104317f5245564553545f544f4b454e000000000000000000000000000000000000000081565b61048861067b366004611779565b610eaa565b61048861068e366004611779565b610fa0565b7f4c49515549444954595f544f4b454e530000000000000000000000000000000060005260026020527f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f5473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de610707366004611841565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6104317f524556455354000000000000000000000000000000000000000000000000000081565b7f464e46540000000000000000000000000000000000000000000000000000000060005260026020527fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d715473ffffffffffffffffffffffffffffffffffffffff166102de565b6104317f544f4b454e5f5641554c5400000000000000000000000000000000000000000081565b6104886107f1366004611779565b611096565b6104317f455343524f57000000000000000000000000000000000000000000000000000081565b6104317f4c49515549444954595f544f4b454e530000000000000000000000000000000081565b610488610852366004611779565b61118c565b61048861086536600461179a565b611288565b610488610878366004611779565b6114ef565b7f524556455354000000000000000000000000000000000000000000000000000060005260026020527ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d35473ffffffffffffffffffffffffffffffffffffffff166102de565b7f455343524f57000000000000000000000000000000000000000000000000000060005260026020527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c985473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de610957366004611841565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61048861098d366004611779565b6115e5565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b7f4c49515549444954595f544f4b454e530000000000000000000000000000000060005260026020527f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610af45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b60018054600090815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790558054610b4f91611859565b60015550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bbc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f544f4b454e5f5641554c5400000000000000000000000000000000000000000060005260026020527fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cb25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f41444d494e00000000000000000000000000000000000000000000000000000060005260026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d6380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610da85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b610db260006116db565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e1b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f5245564553545f544f4b454e000000000000000000000000000000000000000060005260026020527fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f524556455354000000000000000000000000000000000000000000000000000060005260026020527ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f455343524f57000000000000000000000000000000000000000000000000000060005260026020527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c9880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f4c4f434b5f4d414e41474552000000000000000000000000000000000000000060005260026020527fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f3880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b73ffffffffffffffffffffffffffffffffffffffff811661127c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109f5565b611285816116db565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b60026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d6380547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff948516179091557fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f38805482169a84169a909a179099557fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f80548a16978316979097179096557fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b380548916958216959095179094557ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d380548816938516939093179092557fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d71805487169184169190911790557f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc805486169183169190911790557f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f80548516938216939093179092557f455343524f5700000000000000000000000000000000000000000000000000006000527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c9880549093169116179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f464e46540000000000000000000000000000000000000000000000000000000060005260026020527fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d7180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461164c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f4d4554414441544100000000000000000000000000000000000000000000000060005260026020527f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461177457600080fd5b919050565b60006020828403121561178a578081fd5b61179382611750565b9392505050565b60008060008060008060008060006101208a8c0312156117b8578485fd5b6117c18a611750565b98506117cf60208b01611750565b97506117dd60408b01611750565b96506117eb60608b01611750565b95506117f960808b01611750565b945061180760a08b01611750565b935061181560c08b01611750565b925061182360e08b01611750565b91506118326101008b01611750565b90509295985092959850929598565b600060208284031215611852578081fd5b5035919050565b60008219821115611891577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50019056fea26469706673582212203d936bc706ea696f39d92e3e8fccef2aed2e511c33bcdff45ea9085456a05af464736f6c63430008040033',
  deployedBytecode: '0x608060405234801561001057600080fd5b50600436106102775760003560e01c80638da5cb5b11610160578063deedfdbd116100d8578063f95eb4821161008c578063f9f5e1dd11610071578063f9f5e1dd146108e3578063fe40330414610949578063fe7620241461097f57600080fd5b8063f95eb4821461086a578063f97e7d741461087d57600080fd5b8063ee662922116100bd578063ee6629221461081d578063f2fde38b14610844578063f5e95acb1461085757600080fd5b8063deedfdbd146107e3578063e681c4aa146107f657600080fd5b8063b61657f71161012f578063cb4966fb11610114578063cb4966fb1461072f578063d59e296e14610756578063dd9795c6146107bc57600080fd5b8063b61657f714610693578063c8aa6ad6146106f957600080fd5b80638da5cb5b1461062857806399ee24c6146106465780639bb363a91461066d578063b38221ff1461068057600080fd5b80634a6c9235116101f3578063704b6c02116101c25780637378c2cf116101a75780637378c2cf146105c75780637f407235146105ee57806387f7f6961461061557600080fd5b8063704b6c02146105ac578063715018a6146105bf57600080fd5b80634a6c9235146104c457806354f2f7af146104cd5780636497a8a0146105335780636e9960c31461054657600080fd5b80632a0acc6a1161024a578063382b5e071161022f578063382b5e071461047557806338c3df071461048a578063447fa8b7146104b157600080fd5b80632a0acc6a1461040a5780632a7b941a1461043f57600080fd5b8063016abd2c1461027c578063025e3c6114610308578063035d0c691461036e57806321f8a721146103d4575b600080fd5b7f5245564553545f544f4b454e000000000000000000000000000000000000000060005260026020527fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f5473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b7f4d4554414441544100000000000000000000000000000000000000000000000060005260026020527f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc5473ffffffffffffffffffffffffffffffffffffffff166102de565b7f4c4f434b5f4d414e41474552000000000000000000000000000000000000000060005260026020527fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f385473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de6103e2366004611841565b60009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6104317f41444d494e00000000000000000000000000000000000000000000000000000081565b6040519081526020016102ff565b6102de61044d366004611841565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b610488610483366004611779565b610992565b005b6104317f4d4554414441544100000000000000000000000000000000000000000000000081565b6104886104bf366004611779565b610a8d565b61043160015481565b7f544f4b454e5f5641554c5400000000000000000000000000000000000000000060005260026020527fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b35473ffffffffffffffffffffffffffffffffffffffff166102de565b610488610541366004611779565b610b55565b7f41444d494e00000000000000000000000000000000000000000000000000000060005260026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d635473ffffffffffffffffffffffffffffffffffffffff166102de565b6104886105ba366004611779565b610c4b565b610488610d41565b6104317f464e46540000000000000000000000000000000000000000000000000000000081565b6104317f4c4f434b5f4d414e41474552000000000000000000000000000000000000000081565b610488610623366004611779565b610db4565b60005473ffffffffffffffffffffffffffffffffffffffff166102de565b6104317f5245564553545f544f4b454e000000000000000000000000000000000000000081565b61048861067b366004611779565b610eaa565b61048861068e366004611779565b610fa0565b7f4c49515549444954595f544f4b454e530000000000000000000000000000000060005260026020527f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f5473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de610707366004611841565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6104317f524556455354000000000000000000000000000000000000000000000000000081565b7f464e46540000000000000000000000000000000000000000000000000000000060005260026020527fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d715473ffffffffffffffffffffffffffffffffffffffff166102de565b6104317f544f4b454e5f5641554c5400000000000000000000000000000000000000000081565b6104886107f1366004611779565b611096565b6104317f455343524f57000000000000000000000000000000000000000000000000000081565b6104317f4c49515549444954595f544f4b454e530000000000000000000000000000000081565b610488610852366004611779565b61118c565b61048861086536600461179a565b611288565b610488610878366004611779565b6114ef565b7f524556455354000000000000000000000000000000000000000000000000000060005260026020527ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d35473ffffffffffffffffffffffffffffffffffffffff166102de565b7f455343524f57000000000000000000000000000000000000000000000000000060005260026020527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c985473ffffffffffffffffffffffffffffffffffffffff166102de565b6102de610957366004611841565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61048861098d366004611779565b6115e5565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b7f4c49515549444954595f544f4b454e530000000000000000000000000000000060005260026020527f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610af45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b60018054600090815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790558054610b4f91611859565b60015550565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bbc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f544f4b454e5f5641554c5400000000000000000000000000000000000000000060005260026020527fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610cb25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f41444d494e00000000000000000000000000000000000000000000000000000060005260026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d6380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610da85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b610db260006116db565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e1b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f5245564553545f544f4b454e000000000000000000000000000000000000000060005260026020527fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f524556455354000000000000000000000000000000000000000000000000000060005260026020527ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f455343524f57000000000000000000000000000000000000000000000000000060005260026020527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c9880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f4c4f434b5f4d414e41474552000000000000000000000000000000000000000060005260026020527fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f3880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b73ffffffffffffffffffffffffffffffffffffffff811661127c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109f5565b611285816116db565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b60026020527f907d4e175d887abd1b2aee7acb5250af27e89e4dfebb33c93f34dbcee9f39d6380547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff948516179091557fe5d88335617792b383a99e7efbad09d109361ec8d6686a0d9ac3283d7b908f38805482169a84169a909a179099557fb974e5d016092327d837d3a6a5668e6fb42fc6f90b6c1405aac1815b275c589f80548a16978316979097179096557fcd21ebd1b10ee6395e44bcbfbb3ffdc76a12ec6c595ff27da346f28e3d5d89b380548916958216959095179094557ff61a26a04627de97bd8da842023945ae185060688123befc0d8158171b6183d380548816938516939093179092557fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d71805487169184169190911790557f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc805486169183169190911790557f63cd4f14cbab3c7e48fb3a1652b7c6df0096e8e1867653559f7b2b608f7b7c2f80548516938216939093179092557f455343524f5700000000000000000000000000000000000000000000000000006000527f69c4a7a43b1e47fdffe050fe74c33acb158c2d6ebe42780ad0ca29fb61761c9880549093169116179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f464e46540000000000000000000000000000000000000000000000000000000060005260026020527fdaf7722699ec39534a79d28c44da7cfa97e768dcca0a8e6d711dd895cc832d7180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461164c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f5565b7f4d4554414441544100000000000000000000000000000000000000000000000060005260026020527f96f364fb947f4736a33e110e26b56564dfb53a4b589c5276f6e02480accde0fc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461177457600080fd5b919050565b60006020828403121561178a578081fd5b61179382611750565b9392505050565b60008060008060008060008060006101208a8c0312156117b8578485fd5b6117c18a611750565b98506117cf60208b01611750565b97506117dd60408b01611750565b96506117eb60608b01611750565b95506117f960808b01611750565b945061180760a08b01611750565b935061181560c08b01611750565b925061182360e08b01611750565b91506118326101008b01611750565b90509295985092959850929598565b600060208284031215611852578081fd5b5035919050565b60008219821115611891577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50019056fea26469706673582212203d936bc706ea696f39d92e3e8fccef2aed2e511c33bcdff45ea9085456a05af464736f6c63430008040033',
  linkReferences: {},
  deployedLinkReferences: {}
};

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

var EnumType = (function () {
    function EnumType(value) {
        this.value = value;
    }
    return EnumType;
}());
var EnumType_2 = EnumType;


var EnumType_1 = /*#__PURE__*/Object.defineProperty({
	EnumType: EnumType_2
}, '__esModule', {value: true});

var VariableType = (function () {
    function VariableType(value) {
        this.value = value;
    }
    VariableType.prototype.toJSON = function () {
        return "$" + this.value;
    };
    return VariableType;
}());
var VariableType_2 = VariableType;


var VariableType_1 = /*#__PURE__*/Object.defineProperty({
	VariableType: VariableType_2
}, '__esModule', {value: true});

var jsonToGraphQLQuery_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


exports.configFields = [
    '__args', '__alias', '__aliasFor', '__variables', '__directives', '__on', '__all_on', '__typeName', '__name'
];
function stringify(obj_from_json) {
    if (obj_from_json instanceof EnumType_1.EnumType) {
        return obj_from_json.value;
    }
    else if (obj_from_json instanceof VariableType_1.VariableType) {
        return "$" + obj_from_json.value;
    }
    else if (typeof obj_from_json !== 'object' || obj_from_json === null) {
        return JSON.stringify(obj_from_json);
    }
    else if (Array.isArray(obj_from_json)) {
        return "[" + obj_from_json.map(function (item) { return stringify(item); }).join(', ') + "]";
    }
    var props = Object
        .keys(obj_from_json)
        .map(function (key) { return key + ": " + stringify(obj_from_json[key]); })
        .join(', ');
    return "{" + props + "}";
}
function buildArgs(argsObj) {
    var args = [];
    for (var argName in argsObj) {
        args.push(argName + ": " + stringify(argsObj[argName]));
    }
    return args.join(', ');
}
function buildVariables(varsObj) {
    var args = [];
    for (var varName in varsObj) {
        args.push("$" + varName + ": " + varsObj[varName]);
    }
    return args.join(', ');
}
function buildDirectives(dirsObj) {
    var directiveName = Object.keys(dirsObj)[0];
    var directiveValue = dirsObj[directiveName];
    if (typeof directiveValue === 'boolean') {
        return directiveName;
    }
    else if (typeof directiveValue === 'object') {
        var args = [];
        for (var argName in directiveValue) {
            var argVal = stringify(directiveValue[argName]).replace(/"/g, '');
            args.push(argName + ": " + argVal);
        }
        return directiveName + "(" + args.join(', ') + ")";
    }
    else {
        throw new Error("Unsupported type for directive: " + typeof directiveValue + ". Types allowed: object, boolean.\n" +
            ("Offending object: " + JSON.stringify(dirsObj)));
    }
}
function getIndent(level) {
    return Array((level * 4) + 1).join(' ');
}
function filterNonConfigFields(fieldName, ignoreFields) {
    return exports.configFields.indexOf(fieldName) == -1 && ignoreFields.indexOf(fieldName) == -1;
}
function convertQuery(node, level, output, options) {
    Object.keys(node)
        .filter(function (key) { return filterNonConfigFields(key, options.ignoreFields); })
        .forEach(function (key) {
        var value = node[key];
        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                value = value.find(function (item) { return item && typeof item === 'object'; });
                if (!value) {
                    output.push(["" + key, level]);
                    return;
                }
            }
            var fieldCount = Object.keys(value)
                .filter(function (keyCount) { return filterNonConfigFields(keyCount, options.ignoreFields); }).length;
            var subFields = fieldCount > 0;
            var argsExist = typeof value.__args === 'object' && Object.keys(value.__args).length > 0;
            var directivesExist = typeof value.__directives === 'object';
            var fullFragmentsExist = value.__all_on instanceof Array;
            var partialFragmentsExist = typeof value.__on === 'object';
            var token = "" + key;
            if (typeof value.__name === 'string') {
                token = token + " " + value.__name;
            }
            if (typeof value.__aliasFor === 'string') {
                token = token + ": " + value.__aliasFor;
            }
            if (typeof value.__variables === 'object') {
                token = token + " (" + buildVariables(value.__variables) + ")";
            }
            else if (argsExist || directivesExist) {
                var argsStr = '';
                var dirsStr = '';
                if (directivesExist) {
                    dirsStr = Object.entries(value.__directives)
                        .map(function (item) {
                        var _a;
                        return "@" + buildDirectives((_a = {}, _a[item[0]] = item[1], _a));
                    })
                        .join(' ');
                }
                if (argsExist) {
                    argsStr = "(" + buildArgs(value.__args) + ")";
                }
                var spacer = directivesExist && argsExist ? ' ' : '';
                token = token + " " + dirsStr + spacer + argsStr;
            }
            output.push([token + (subFields || partialFragmentsExist || fullFragmentsExist ? ' {' : ''), level]);
            convertQuery(value, level + 1, output, options);
            if (fullFragmentsExist) {
                value.__all_on.forEach(function (fullFragment) {
                    output.push(["..." + fullFragment, level + 1]);
                });
            }
            if (partialFragmentsExist) {
                var inlineFragments = value.__on instanceof Array ? value.__on : [value.__on];
                inlineFragments.forEach(function (inlineFragment) {
                    var name = inlineFragment.__typeName;
                    output.push(["... on " + name + " {", level + 1]);
                    convertQuery(inlineFragment, level + 2, output, options);
                    output.push(['}', level + 1]);
                });
            }
            if (subFields || partialFragmentsExist || fullFragmentsExist) {
                output.push(['}', level]);
            }
        }
        else if (options.includeFalsyKeys === true || value) {
            output.push(["" + key, level]);
        }
    });
}
function jsonToGraphQLQuery(query, options) {
    if (options === void 0) { options = {}; }
    if (!query || typeof query != 'object') {
        throw new Error('query object not specified');
    }
    if (Object.keys(query).length == 0) {
        throw new Error('query object has no data');
    }
    if (!(options.ignoreFields instanceof Array)) {
        options.ignoreFields = [];
    }
    var queryLines = [];
    convertQuery(query, 0, queryLines, options);
    var output = '';
    queryLines.forEach(function (_a) {
        var line = _a[0], level = _a[1];
        if (options.pretty) {
            if (output) {
                output += '\n';
            }
            output += getIndent(level) + line;
        }
        else {
            if (output) {
                output += ' ';
            }
            output += line;
        }
    });
    return output;
}
exports.jsonToGraphQLQuery = jsonToGraphQLQuery;

});

let subgraphRequest = (() => {
  var _ref = _asyncToGenerator(function* (url, query, options = {}) {
    const res = yield fetch(url, {
      method: 'POST',
      headers: _objectSpread2({
        Accept: 'application/json',
        'Content-Type': 'application/json'
      }, options?.headers),
      body: JSON.stringify({
        query: jsonToGraphQLQuery_1.jsonToGraphQLQuery({
          query
        })
      })
    });
    const {
      data
    } = yield res.json();
    return data || {};
  });

  return function subgraphRequest(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
let multicall = (() => {
  var _ref2 = _asyncToGenerator(function* (network, provider, abi, calls, options = {}) {
    const multicallAbi = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)', 'function getFNFT(uint fnftId) external view returns (tuple(address asset, address pipeToContract, uint depositAmount, uint depositMul, uint split, uint depositStopTime, bool maturityExtension, bool isMulti, bool nontransferrable))'];
    let net = yield provider.getNetwork();
    let chainId = net.chainId;
    const multi = new ethers.Contract(ADDRESSES[chainId].MULTICALL, multicallAbi, provider);
    const itf = new ethers.utils.Interface(abi);

    try {
      const max = options?.limit || 500;
      const pages = Math.ceil(calls.length / max);
      const promises = [];
      Array.from(Array(pages)).forEach(function (x, i) {
        const callsInPage = calls.slice(max * i, max * (i + 1));
        promises.push(multi.aggregate(callsInPage.map(function (call) {
          return [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])];
        }), options || {}));
      });
      let results = yield Promise.all(promises);
      results = results.reduce(function (prev, [, res]) {
        return prev.concat(res);
      }, []);
      return results.map(function (call, i) {
        return itf.decodeFunctionResult(calls[i][1], call);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  });

  return function multicall(_x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
})();
let lazyLoad = (() => {
  var _ref3 = _asyncToGenerator(function* () {
    return new IntersectionObserver(function (entries) {
      entries.filter(function (entry) {
        return entry.isIntersecting;
      }).forEach(function (entry) {
        if (!entry.target.childNodes[0].src) {
          entry.target.childNodes[0].setAttribute('src', entry.target.childNodes[0].dataset.src);
          entry.target.childNodes[0].style.zIndex = 999;
        }
      });
    }, {
      root: null,
      threshold: new Array(101).fill(0).map(function (zero, index) {
        return index * 0.01;
      })
    });
  });

  return function lazyLoad() {
    return _ref3.apply(this, arguments);
  };
})();

/**
 * 
 *
 * @class Revest
 */

class Revest {
  constructor(divId) {
    var _this = this;

    _defineProperty(this, "renderAllFNFTs", (() => {
      var _ref = _asyncToGenerator(function* (data) {
        try {
          console.log(data);
          _this.observer = yield lazyLoad();
          return data.reduce(function (promises, fnft) {
            return promises.then(function (_index) {
              return fetch(fnft.url).then(function (response) {
                return response.json();
              }).then(function (data) {
                return fetch(data.animation_url).then(function (response) {
                  return response.text();
                }).then(function (_data, index) {
                  const div = document.createElement('div');
                  const iframe = document.createElement('embed');
                  const blob = new Blob([_data], {
                    type: 'text/html'
                  });
                  div.className = 'card';
                  iframe.frameborder = 0;
                  iframe.className = 'lazyload';
                  iframe.width = '300';
                  iframe.height = '460';
                  iframe.style.width = '300';
                  iframe.id = 'fnft_' + fnft.id;
                  iframe.style.height = '460';
                  iframe.wmode = 'transparent';
                  iframe.dataset.src = window.URL.createObjectURL(blob);
                  div.appendChild(iframe);
                  document.getElementById(_this._divId).appendChild(div);

                  _this.observer.observe(div);

                  return Promise.resolve(index + 1);
                });
              });
            });
          }, Promise.resolve(1));
        } catch (error) {
          console.log(error);
        }
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    })());

    _defineProperty(this, "getAllFNFTsForUser", (() => {
      var _ref2 = _asyncToGenerator(function* (user, provider, _worker) {
        let net = yield provider.getNetwork();
        let chainId = net.chainId;
        const address = [user];
        const revestRouter = new ethers.Contract(ADDRESSES[chainId].ROUTER, RouterABI.abi, provider);
        const FNFT_HANDLER = yield revestRouter.getRevestFNFT();
        let userFNFTs = [];
        const eip1155OwnersParams = {
          accounts: {
            __args: {
              where: {
                id_in: address.map(function (a) {
                  return a.toLowerCase();
                })
              }
            },
            id: true,
            balances: {
              value: true,
              token: {
                registry: {
                  id: true
                },
                identifier: true
              }
            }
          }
        };
        let response = yield subgraphRequest(SUBGRAPH_URL[chainId], eip1155OwnersParams);
        response.accounts[0].balances.forEach(function (balance) {
          if (balance.token.registry.id.toLowerCase() === FNFT_HANDLER.toLowerCase() && balance.value != '0') {
            userFNFTs.push(Number(balance.token.identifier));
          }
        });

        if (_worker) {
          return userFNFTs;
        }

        const fnfts = yield (yield fetch('https://api.revest.finance/metadata?id=' + userFNFTs.sort(function (a, b) {
          return b - a;
        }).join(','))).json();
        return fnfts;
      });

      return function (_x2, _x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    })());

    _defineProperty(this, "getFNFTsForUserAndContractWithURI", (() => {
      var _ref3 = _asyncToGenerator(function* (user, contractAddress, provider) {
        try {
          const fnftHandlerABI = ['function uri(uint fnftId) external view returns (string memory)'];
          let net = yield provider.getNetwork();
          let chainId = net.chainId;
          let allFNFTs = yield getFNFTsForUserAndContract(user, contractAddress, provider);
          let ids = allFNFTsForUser.ids;
          let response = yield multicall(chainId, provider, fnftHandlerABI, ids.map(function (id) {
            return [allFNFTs.nftAddress, 'uri', [id]];
          }));
          let fnfts = {};
          response.forEach(function (entry, index) {
            fnfts[ids[index]] = {
              uri: entry[0]
            };
          });
          allFNFTs.fnfts = fnfts;
          return allFNFTs;
        } catch (error) {
          console.log(error);
        }
      });

      return function (_x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
      };
    })());

    _defineProperty(this, "getFNFTsForUserAndContract", (() => {
      var _ref4 = _asyncToGenerator(function* (user, contractAddress, provider) {
        try {
          const tokenVaultABI = ['function getFNFT(uint fnftId) external view returns (tuple(address asset, address pipeToContract, uint depositAmount, uint depositMul, uint split, uint depositStopTime, bool maturityExtension, bool isMulti, bool nontransferrable))'];
          let net = yield provider.getNetwork();
          let chainId = net.chainId;
          let allFNFTsForUser = yield _this.getAllFNFTsForUser(user, provider, true);
          let ids = allFNFTsForUser;
          const revestRouter = new ethers.Contract(ADDRESSES[chainId].ROUTER, RouterABI.abi, provider);
          const TOKEN_VAULT = yield revestRouter.getTokenVault();
          let response = yield multicall(chainId, provider, tokenVaultABI, ids.map(function (id) {
            return [TOKEN_VAULT, 'getFNFT', [id]];
          }));
          let idsForContract = [];
          response.forEach(function (entry, index) {
            if (entry[0].pipeToContract.toLowerCase() == contractAddress.toLowerCase()) {
              idsForContract.push(ids[index]);
            }
          });
          allFNFTsForUser.ids = idsForContract;
          allFNFTsForUser.contractAddress = contractAddress;
          allFNFTsForUser.vaultAddress = TOKEN_VAULT;
          const fnfts = yield (yield fetch('https://api.revest.finance:3000/metadata?id=' + allFNFTsForUser.ids.sort(function (a, b) {
            return b - a;
          }).join(','))).json();
          return fnfts;
        } catch (error) {
          console.log(error);
        }
      });

      return function (_x8, _x9, _x10) {
        return _ref4.apply(this, arguments);
      };
    })());

    _defineProperty(this, "filterFNFTIdListByMaturityDate", (() => {
      var _ref5 = _asyncToGenerator(function* (fnftIds, upperBoundDate, provider) {
        const revestABI = 'event FNFTTimeLockMinted(address indexed asset, address indexed from, uint indexed fnftId, uint endTime, uint[] quantities, tuple(address asset, address pipeToContract, uint depositAmount, uint depositMul, uint split, uint depositStopTime, bool maturityExtension, bool isMulti, bool nontransferrable) fnftConfig);';
        let net = yield provider.getNetwork();
        let chainId = net.chainId;
        const revestRouter = new ethers.Contract(ADDRESSES[chainId].ROUTER, RouterABI.abi, provider);
        let REVEST = yield revestRouter.getRevest();
        const revestContract = new ethers.Contract(REVEST, revestABI, provider);
        let TimeLockEvent = revestContract.filters.TimeLockEvent(null, null, fnftIds);
        TimeLockEvent.fromBlock = ADDRESSES[network].MIN_BLOCK;
        TimeLockEvent.toBlock = 'latest';
        let timeLocks = yield provider.getLogs(TimeLockEvent);
        let events = timeLocks.map(function (log) {
          return revestContract.interface.parseLog(log);
        });
        let filteredIds = []; // Find minima

        for (let i in events) {
          let args = events[i].args;
          let localEnd = Number(args.endTime.toString());

          if (localEnd <= upperBoundDate) {
            filteredIds.push({
              id: Number(args.fnftId.toString()),
              endTime: localEnd
            });
          }
        }

        filteredIds = filteredIds.sort(function (a, b) {
          return a.endTime - b.endTime;
        }).map(function (item) {
          return item.id;
        });
        return filteredIds;
      });

      return function (_x11, _x12, _x13) {
        return _ref5.apply(this, arguments);
      };
    })());

    this._divId = divId;
    this.observer;
  }
  /**
   * Creating embed for each FNFT and append all of them in the div provided in the constructur
   *
   *
   * @param {object} data
   * @memberof Revest
   * @returns promise
   */


}

module.exports = Revest;
